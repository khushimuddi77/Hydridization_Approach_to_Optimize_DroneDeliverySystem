{"cells":[{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":30714,"status":"ok","timestamp":1700651295823,"user":{"displayName":"Shikha Reji","userId":"09704787208737744969"},"user_tz":-330},"id":"PW8r_EIMSXLA","outputId":"f0fa13e8-11d6-471e-a3ad-3dda85149ba6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Cluster 1:\n","    Customer     Distance   Payload\n","1          2  1117.852433  0.943155\n","4          5   937.248470  1.790164\n","8          9   961.745013  4.107892\n","12        13  1136.054641  0.124923\n","15        16   919.186707  4.376559\n","16        17   835.784957  4.112062\n","17        18   863.051735  2.079009\n","18        19  1033.770023  2.191698\n","19        20  1043.494918  0.703710\n","24        25  1035.203576  0.709957\n","26        27  1041.841449  4.582634\n","28        29   914.484912  0.578149\n","29        30  1139.670040  2.293878\n","30        31  1080.401152  0.913318\n","32        33  1010.033359  3.986146\n","42        43  1086.142625  0.555344\n","43        44  1059.406868  2.171461\n","44        45   815.605958  0.019909\n","48        49  1087.210975  1.555144\n","\n","Cluster 2:\n","    Customer     Distance   Payload\n","7          8  2879.572941  4.190192\n","36        37  3214.855202  4.856952\n","37        38  3264.877289  1.173815\n","40        41  3169.619218  0.525607\n","\n","Cluster 3:\n","    Customer     Distance   Payload\n","11        12  2005.700771  2.557623\n","14        15  1687.177943  1.463220\n","38        39  1844.814481  1.919616\n","\n","Cluster 4:\n","    Customer    Distance   Payload\n","0          1  326.401740  4.491287\n","9         10  400.841323  1.797942\n","20        21  221.540039  0.263676\n","25        26  265.093714  0.640673\n","34        35  342.185665  4.009100\n","41        42   90.988856  0.244584\n","49        50   65.093513  2.771162\n","\n","Cluster 5:\n","    Customer     Distance   Payload\n","3          4  1334.026117  4.765051\n","5          6  1396.600127  1.915865\n","10        11  1379.734706  3.410262\n","13        14  1202.017508  1.205059\n","22        23  1263.009745  0.400565\n","27        28  1352.785723  0.146847\n","33        34  1266.695464  3.701519\n","35        36  1355.189832  3.340669\n","39        40  1193.910577  4.670138\n","45        46  1494.264636  4.910115\n","\n","Cluster 6:\n","    Customer    Distance   Payload\n","2          3  684.420329  0.957090\n","6          7  531.299506  4.801491\n","21        22  612.102349  1.522988\n","23        24  730.178228  1.223056\n","46        47  612.249924  0.137805\n","47        48  595.114433  1.847165\n","\n","Cluster 7:\n","    Customer     Distance   Payload\n","31        32  2360.903828  0.548457\n","\n"]}],"source":["import time\n","\n","# Record the start time\n","start_time = time.time()\n","\n","import numpy as np\n","from sklearn.cluster import AgglomerativeClustering\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from scipy.spatial import distance_matrix\n","import pandas as pd\n","\n","\n","from google.colab import drive\n","drive.mount('/content/drive/')\n","data = pd.read_csv('/content/drive/MyDrive/data/distance/county_pairwise_distance.csv')\n","data_1 = pd.read_csv('/content/drive/MyDrive/data/distance/drone_delivery_data (3)2.csv')\n","\n","n_clusters=7\n","n_samples=50\n","\n","prob=pd.read_csv('/content/drive/MyDrive/data/distance/probability (7).csv')\n","\n","payload=data_1['Payload']\n","\n","row = data.iloc[0]\n","\n","distances=[]\n","payloads=[]\n","\n","for i in range(n_samples+1):\n","  distances.append(row[i])\n","\n","distances.pop(0)\n","\n","for i in range(n_samples):\n","  payloads.append(payload[i])\n","\n","\n","\n","np.random.seed(0)\n","n_features = 2\n","\n","\n","# Combine the features into a feature matrix\n","X = np.column_stack((distances, payloads))\n","\n","# Initialize Agglomerative Clustering with the desired number of clusters\n","agglomerative = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward')\n","cluster_labels = agglomerative.fit_predict(X)\n","best_cluster_labels=cluster_labels\n","\n","# Define feature names\n","feature_names = ['Distance', 'Payload']\n","\n","# DataFrame to store the data points and cluster labels\n","data_df = pd.DataFrame(X, columns=feature_names)\n","data_df['Cluster'] = cluster_labels\n","\n","# Create a new column 'Customer' to represent customer numbers starting from 1\n","data_df['Customer'] = range(1, n_samples + 1)\n","\n","# Visualize the clusters with labeled data points\n","plt.figure(figsize=(12, 8))\n","for i in range(n_clusters):\n","    cluster_points = data_df[data_df['Cluster'] == i]\n","\n","    plt.scatter(cluster_points['Distance'], cluster_points['Payload'], label=f'Cluster {i + 1}', s=60)\n","\n","plt.xlabel('Distance from Depot',fontsize=12)\n","plt.ylabel('Payload',fontsize=12)\n","plt.legend(fontsize=12)\n","plt.title('Agglomerative Clustering for Drone Delivery Scheduling')\n","plt.show()\n","\n","for i in range(n_clusters):\n","    cluster_data = data_df[data_df['Cluster'] == i]\n","    print(f\"Cluster {i + 1}:\")\n","    print(cluster_data[['Customer', 'Distance', 'Payload']])\n","    print()\n","cluster_distance_matrices = []\n","for i in range(n_clusters):\n","    cluster_point = data_df[data_df['Cluster'] == i][['Distance', 'Payload']].values\n","    dist_matrix = distance_matrix(cluster_point, cluster_point)\n","    cluster_distance_matrices.append(dist_matrix)\n","\n","\n","\n"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":29779,"status":"ok","timestamp":1700651325596,"user":{"displayName":"Shikha Reji","userId":"09704787208737744969"},"user_tz":-330},"id":"ZlmRV_WrL_sW","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d3998b6d-3d2c-4672-b22e-dc02dda1c677"},"outputs":[{"output_type":"stream","name":"stdout","text":["Best ACO Route for Cluster 1:\n","[-1, 2, 13, 30, 49, 43, 31, 44, 20, 27, 19, 25, 33, 9, 5, 16, 29, 18, 17, 45]\n","Best ACO Route for Cluster 2:\n","[-1, 8, 37, 38, 41]\n","Best ACO Route for Cluster 3:\n","[-1, 12, 39, 15]\n","Best ACO Route for Cluster 4:\n","[-1, 26, 21, 50, 42, 1, 35, 10]\n","Best ACO Route for Cluster 5:\n","[-1, 4, 28, 36, 11, 6, 34, 23, 40, 14, 46]\n","Best ACO Route for Cluster 6:\n","[-1, 3, 24, 22, 47, 48, 7]\n","Best ACO Route for Cluster 7:\n","[-1, 32]\n"]}],"source":["import numpy as np\n","import random\n","from scipy.spatial import distance_matrix\n","import pandas as pd\n","\n","# Define ACO parameters\n","n_ants = 10\n","n_iterations = 50\n","rho = 0.1  # Pheromone evaporation rate\n","alpha = 1.0  # Pheromone weight\n","beta = 2.0  # Heuristic information weight\n","q0 = 0.9  # Exploration factor (probability to choose the best next city)\n","pheromone_min = 0.01  # Minimum pheromone level\n","\n","# Initialize pheromone levels for each cluster\n","pheromone_levels = [np.ones_like(cluster_distance_matrix) for cluster_distance_matrix in cluster_distance_matrices]\n","\n","\n","\n","# Define a function to compute the tour length\n","def tour_length(tour, distance_matrix,d,cluster_idx):\n","  length = 0\n","\n","\n","  c = data_df[data_df['Cluster'] == cluster_idx]['Customer'].values\n","  tour_1 = [c[index] for index in tour]\n","\n","  for i in range(len(tour)-1):\n","        from_customer=tour_1[i]\n","        to_customer=tour_1[i+1]\n","\n","\n","\n","        result = d.loc[(d['From'] == from_customer-1) & (d['To'] == to_customer-1), 'probability']\n","\n","\n","        length += (distance_matrix[tour[i]][tour[i+1]])*result.values[0]\n","\n","  return length\n","\n","# Apply ACO to each cluster independently\n","best_tours = []\n","\n","for cluster_idx, distance_matrix in enumerate(cluster_distance_matrices):\n","    n_cities = len(distance_matrix)\n","\n","\n","\n","    customer_numbers_for_cluster = data_df[data_df['Cluster'] == cluster_idx]['Customer'].values\n","\n","    columns = ['From', 'To', 'probability']\n","    d = pd.DataFrame(columns=columns)\n","\n","\n","    for i in range(len(customer_numbers_for_cluster)-1):\n","      from_customer=customer_numbers_for_cluster[i]\n","      for j in range(i+1,len(customer_numbers_for_cluster)):\n","\n","        to_customer=customer_numbers_for_cluster[j]\n","        result = prob.loc[(prob['From Customer'] == from_customer-1) & (prob['To Customer'] == to_customer-1), 'Probability']\n","        p=probability_of_failure=result.values[0]\n","        data=[from_customer-1,to_customer-1,p]\n","        d = pd.concat([d, pd.DataFrame([data], columns=columns)], ignore_index=True)\n","\n","\n","        data=[to_customer-1,from_customer-1,p]\n","        d = pd.concat([d, pd.DataFrame([data], columns=columns)], ignore_index=True)\n","\n","\n","\n","\n","\n","    # Initialize best tour and length for the cluster\n","    best_tour = None\n","    best_length = float('inf')\n","\n","    for iteration in range(n_iterations):\n","        for ant in range(n_ants):\n","            # Initialize ant's tour with a random city\n","            tour = [np.random.randint(0, n_cities)]\n","            allowed_cities = set(range(n_cities))\n","            allowed_cities.remove(tour[0])\n","\n","            for _ in range(n_cities - 1):\n","                # Compute probabilities for the next city\n","                current_city = tour[-1]\n","                probabilities = []\n","                for city in range(n_cities):\n","                    if city in allowed_cities:\n","                        pheromone = pheromone_levels[cluster_idx][current_city][city]\n","                        distance = distance_matrix[current_city][city]\n","                        probability = (pheromone*alpha) * ((1.0 / distance)*beta)\n","                        probabilities.append((city, probability))\n","\n","                if np.random.rand() < q0:\n","                    # Choose the city with the highest probability (exploitation)\n","                    next_city = max(probabilities, key=lambda x: x[1])[0]\n","                else:\n","                    # Choose a city based on probabilities (exploration)\n","                    total_probability = sum(p for _, p in probabilities)\n","                    choice = np.random.rand() * total_probability\n","                    probability_sum = 0\n","                    for city, p in probabilities:\n","                        probability_sum += p\n","                        if probability_sum >= choice:\n","                            next_city = city\n","                            break\n","\n","                tour.append(next_city)\n","                allowed_cities.remove(next_city)\n","\n","            # Calculate the tour length\n","            tour_len = tour_length(tour, distance_matrix,d,cluster_idx)\n","\n","            # Update the best tour for this ant\n","            if tour_len < best_length:\n","                best_length = tour_len\n","                best_tour = tour\n","\n","        # Update pheromone levels using ant routes\n","        delta_pheromone = np.zeros_like(distance_matrix)\n","        for ant in range(n_ants):\n","            tour = best_tour if ant == 0 else np.random.permutation(n_cities)\n","            tour_len = tour_length(tour, distance_matrix,d,cluster_idx)\n","            for i in range(len(tour) - 1):\n","                current_city, next_city = tour[i], tour[i + 1]\n","                delta_pheromone[current_city][next_city] += 1.0 / tour_len\n","                delta_pheromone[next_city][current_city] = delta_pheromone[current_city][next_city]\n","\n","        # Update pheromone levels with evaporation and addition of new pheromone\n","        pheromone_levels[cluster_idx] = (1 - rho) * pheromone_levels[cluster_idx] + delta_pheromone\n","\n","        # Ensure pheromone levels don't go below the minimum\n","        pheromone_levels[cluster_idx] = np.maximum(pheromone_levels[cluster_idx], pheromone_min)\n","\n","    best_tours.append(best_tour)\n","\n","# Map the indexes in ACO routes to customer numbers for each cluster\n","full_aco_routes = []\n","for cluster_idx, aco_route in enumerate(best_tours):\n","    customer_numbers_for_cluster = data_df[data_df['Cluster'] == cluster_idx]['Customer'].values\n","    aco_route_customer_numbers = [customer_numbers_for_cluster[index] for index in aco_route]\n","    aco_route_customer_numbers=[-1]+aco_route_customer_numbers\n","    full_aco_routes.append(aco_route_customer_numbers)\n","\n","# Print and visualize the best ACO routes for each cluster\n","for i, aco_route in enumerate(full_aco_routes):\n","    print(f'Best ACO Route for Cluster {i + 1}:')\n","    print(aco_route)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"23PWtsyZrro2","executionInfo":{"status":"ok","timestamp":1700651325598,"user_tz":-330,"elapsed":43,"user":{"displayName":"Shikha Reji","userId":"09704787208737744969"}}},"outputs":[],"source":["\n","def Cust_Payload(customer_number_to_find):\n"," customer_number_to_find-=1\n","# Iterate through the clusters\n"," for cluster_number in range(n_clusters):\n","    # Filter the DataFrame to get the cluster data\n","  cluster_data = data_df[data_df['Cluster'] == cluster_number]\n","\n","  # Check if the customer number is in the indices of the filtered DataFrame\n","  if customer_number_to_find in cluster_data.index:\n","\n","   payload_of_customer = cluster_data.loc[customer_number_to_find, 'Payload']\n","   return payload_of_customer\n","\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"8Cm9EcuXsaRk","executionInfo":{"status":"ok","timestamp":1700651325599,"user_tz":-330,"elapsed":41,"user":{"displayName":"Shikha Reji","userId":"09704787208737744969"}}},"outputs":[],"source":["\n","def total_payload(route):\n","  payload=0\n","  for i in range(len(route)):\n","    if i!=0:\n","        payload+=Cust_Payload(route[i])\n","  return payload\n","\n"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":39,"status":"ok","timestamp":1700651325599,"user":{"displayName":"Shikha Reji","userId":"09704787208737744969"},"user_tz":-330},"id":"Gil23zD5oPTJ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"806aa1d0-43bc-4f05-b9f7-a861fa6442be"},"outputs":[{"output_type":"stream","name":"stdout","text":["ELOD for Cluster 1: 9.433337241905678\n","ELOD for Cluster 2: 0.3369961147984243\n","ELOD for Cluster 3: 0.25476067214948245\n","ELOD for Cluster 4: 0.9569400345677778\n","ELOD for Cluster 5: 2.51746290145939\n","ELOD for Cluster 6: 1.235216356987279\n","ELOD for Cluster 7: 0.01333536846591143\n","\n","The Total ELOD is 14.748048690333942\n","\n","Computational time: 60.1270637512207\n"]}],"source":["import numpy as np\n","import random\n","from scipy.spatial import distance_matrix\n","import pandas as pd\n","\n","#prob=pd.read_csv('/content/drive/MyDrive/data/distance/probability (7).csv')\n","\n","depot_number = -1\n","\n","def calculate_elod(cluster_routes):\n","    elod_values = []\n","\n","    for cluster_idx in range(len(cluster_routes)):\n","        elod_cluster = 0\n","        success_probability_product=1\n","        route = cluster_routes[cluster_idx]\n","\n","        Total_payload=total_payload(route)\n","        for i in range(len(route) - 1):\n","\n","            from_customer = route[i]\n","            to_customer = route[i+1]\n","\n","            if from_customer==-1:\n","              from_customer=0\n","            result = prob.loc[(prob['From Customer'] == from_customer-1) & (prob['To Customer'] == to_customer-1), 'Probability']\n","            probability_of_failure=result.values[0]\n","\n","            payload=Cust_Payload(to_customer)\n","\n","            elod_segment = probability_of_failure * Total_payload * success_probability_product\n","            Total_payload-=payload\n","            success=1-probability_of_failure\n","            success_probability_product*=success\n","\n","            elod_cluster += elod_segment\n","\n","        elod_values.append(elod_cluster)\n","\n","    return elod_values\n","\n","\n","# Calculate ELOD for each cluster\n","elod_values = calculate_elod(full_aco_routes)\n","\n","\n","\n","Total_ELOD=0\n","for i, elod in enumerate(elod_values):\n","    print(f'ELOD for Cluster {i + 1}: {elod}')\n","    Total_ELOD+=elod\n","\n","print(f'\\nThe Total ELOD is {Total_ELOD}')\n","\n","end_time = time.time()\n","\n","# Calculate the elapsed time\n","elapsed_time = end_time - start_time\n","print(f'\\nComputational time: {elapsed_time}')\n","\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1UY9VrnbW5YSI4976fpvE1MqkeszbopzC","timestamp":1700416200289},{"file_id":"1y0qjZh83EBiDdQ1SOGBegAuFtVCvuFe_","timestamp":1698514610840},{"file_id":"1_EqUjq7TXTJz1nELXY-YpFm9fk2vD9Q9","timestamp":1698412989343}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}